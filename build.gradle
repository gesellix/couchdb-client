apply plugin: 'groovy'
apply plugin: 'com.github.ben-manes.versions'

dependencies {
    compile "org.codehaus.groovy:groovy:$groovyVersion"
    compile "org.codehaus.groovy:groovy-json:$groovyVersion"
    compile 'commons-lang:commons-lang:2.6'

    compile "org.slf4j:slf4j-api:$slf4jVersion"
    runtime "org.slf4j:log4j-over-slf4j:$slf4jVersion"
    runtime "ch.qos.logback:logback-classic:$logbackVersion"

    testCompile "org.spockframework:spock-core:$spockVersion"
    testCompile 'cglib:cglib-nodep:3.2.2'
    testCompile 'com.jayway.jsonpath:json-path:2.2.0'
    testCompile 'com.jayway.jsonpath:json-path-assert:2.2.0'

    compile 'com.squareup.okhttp3:okhttp:3.2.0'
//    compile "org.ektorp:org.ektorp:$ektorpVersion"

    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"
}

sourceSets {
    integrationTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output

        groovy {
            srcDir 'src/integrationTest/groovy'
        }
        resources {
            srcDir 'src/integrationTest/resources'
        }
    }
}

//[npm_run_pouchdb].each { it.dependsOn(npmInstall) }

task integrationTest(type: Test) {
//    dependsOn npm_run_pouchdb
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

dependencies {
    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.testCompile
    integrationTestCompile sourceSets.test.output
    integrationTestRuntime configurations.testRuntime
}

check.dependsOn integrationTest
integrationTest.shouldRunAfter test

tasks.withType(Test) {
    systemProperties = System.properties
}
