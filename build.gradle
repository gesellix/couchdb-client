import org.ajoberstar.grgit.Grgit

import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        //classpath 'org.ajoberstar:gradle-git:0.11.2'
        classpath 'org.ajoberstar:grgit:1.7.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    }
}

// select jdk 8 on mac os x:
// $> JAVA_HOME=$(/usr/libexec/java_home -v 1.8) ./gradlew build
def langLevel = JavaVersion.VERSION_1_8
assert JavaVersion.toVersion(System.getProperty("java.version")) == langLevel

ext {
    artifactVersion = {
        repo = Grgit.open()
        def commitHash = repo.head().id
        def localDate = new SimpleDateFormat('yyyy-MM-dd').format(new Date())
        def localDateTime = new SimpleDateFormat('yyyy-MM-dd\'T\'HH-mm-ss').format(new Date())
        return "${localDate}_${commitHash}".toString()
    }()
    bintrayDryRun = false

    groovyVersion = '2.4.6'
    jacksonVersion = '2.7.4'
    logbackVersion = '1.1.7'
    metricsVersion = '3.0.2'
    slf4jVersion = '1.7.21'
    spockVersion = '1.0-groovy-2.4'
}

apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = langLevel
targetCompatibility = langLevel

group = 'de.gesellix'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

dependencies {
    compile "org.codehaus.groovy:groovy:$groovyVersion"
    compile "org.codehaus.groovy:groovy-json:$groovyVersion"
    compile 'commons-lang:commons-lang:2.6'

    compile "org.slf4j:slf4j-api:$slf4jVersion"
    runtime "org.slf4j:log4j-over-slf4j:$slf4jVersion"
    runtime "ch.qos.logback:logback-classic:$logbackVersion"

    testCompile "org.spockframework:spock-core:$spockVersion"
    testCompile 'cglib:cglib-nodep:3.2.2'
    testCompile 'com.jayway.jsonpath:json-path:2.2.0'
    testCompile 'com.jayway.jsonpath:json-path-assert:2.2.0'

    compile 'com.squareup.okhttp3:okhttp:3.3.1'

    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"
}

def dependencyVersions = [
        "commons-logging:commons-logging:1.2",
        "net.minidev:json-smart:2.2",
        "org.apache.xmlbeans:xmlbeans:2.6.0",
        "org.codehaus.groovy:groovy-all:$groovyVersion",
        "org.slf4j:slf4j-api:$slf4jVersion",
        "org.ow2.asm:asm:5.0.3"
]

def dependencyVersionsByGroup = [
        'ch.qos.logback'                : logbackVersion,
        'com.fasterxml.jackson.core'    : jacksonVersion,
        'com.fasterxml.jackson.databind': jacksonVersion,
]

configurations {
    all*.exclude module: 'log4j'
    all*.exclude module: 'servlet-api'

    all {
        resolutionStrategy {
            failOnVersionConflict()

            force dependencyVersions
            eachDependency { DependencyResolveDetails details ->
                if (dependencyVersionsByGroup[details.requested.group]) {
                    details.useVersion dependencyVersionsByGroup[details.requested.group]
                }
            }
        }
    }
}

sourceSets {
    integrationTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output

        groovy {
            srcDir 'src/integrationTest/groovy'
        }
        resources {
            srcDir 'src/integrationTest/resources'
        }
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

dependencies {
    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.testCompile
    integrationTestCompile sourceSets.test.output
    integrationTestRuntime configurations.testRuntime
}

check.dependsOn integrationTest
integrationTest.shouldRunAfter test

tasks.withType(Test) {
    systemProperties = System.properties
}

task sourcesJar(type: Jar) {
    dependsOn classes
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        couchdbClient(MavenPublication) {
            version artifactVersion
            from components.java
            artifact sourcesJar
        }
    }
}

bintray {
    user = System.env.BINTRAY_USER ?: project["bintray.user"]
    key = System.env.BINTRAY_API_KEY ?: project["bintray.key"]
    publications = ['couchdbClient']
    pkg {
        repo = 'couchdb'
        name = 'couchdb-client'
        desc = 'A CouchDB client written in Groovy'
        licenses = ['Apache-2.0']
        labels = ['couchdb', 'client']
        version = [
                name: artifactVersion
        ]
        vcsUrl = 'https://github.com/gesellix/couchdb-client'
    }
    dryRun = bintrayDryRun
}
bintrayUpload.dependsOn build

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
